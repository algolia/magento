
/**
 * Main header function with docsearch
 * @param  {Object} docSearch config
 */
const communityHeader = (docSearch) => {

  const hasDocSearchRendered = document.querySelector('.algc-navigation .algc-search__input--docsearch');
  let enableDocSearch = (docSearch.apiKey && docSearch.indexName && docSearch.inputSelector) ? true : false;

  if (!enableDocSearch && hasDocSearchRendered) {
    throw new Error('You need to pass docSearch: { api_key, index_name, input_selector } to communityHeader function in order to initialise docSearch');
  }

  const navRoot = document.querySelector('.algc-dropdownroot');
  const dropdownRoot = document.querySelector('.algc-navigation__dropdown-holder');
  const navItems = document.querySelectorAll('a[data-enabledropdown="true"]');
  const navContainer = document.querySelector('.algc-dropdownroot__dropdowncontainer');

  const menuContainer = document.querySelector('.algc-navigation__container');
  const navBg = document.querySelector('.algc-dropdownroot__dropdownbg');
  const navArrow = document.querySelector('.algc-dropdownroot__dropdownarrow');
  const dropDownContainer = document.querySelector('.algc-dropdownroot__dropdowncontainer');
  const menuTriggers = document.querySelectorAll('[data-enabledropdown="true"]');

  const mobileMenuButton = document.querySelector('.algc-openmobile ');
  const mobileMenu = document.querySelector('.algc-mobilemenu');

  const subList = document.querySelectorAll('.algc-menu--hassublist .algc-menu--sublistlink');
  const subListHolders = [...subList].map(node => node.parentNode);

  // State of menus
  const state = {
    isOpen: false,
    isOpenMobile: false
  }

  let menuDropdowns = {};

  [].forEach.call(document.querySelectorAll('[data-dropdown-content]'), (item) => {
    menuDropdowns[item.dataset.dropdownContent] = {
      parent: item.parentNode,
      content: item
    }
  });

  const INIT_VAL = {
    WIDTH: 490,
    HEIGHT: 360
  }

  let disableTransitionTimeout;

  const triggerMenu = (event) => {

    const dropdown = event.target.dataset.dropdown;
    const newTarget = menuDropdowns[dropdown].content;
    const newContent = menuDropdowns[dropdown].parent;

    const navItem = _utils.calculatePosition(event.target);
    const newTargetCoordinates = _utils.calculatePosition(newTarget);
    const menuContainerOffset = _utils.calculatePosition(menuContainer);
    let leftDistance;

    const scaleFactors = {
      X: newTargetCoordinates.realWidth / INIT_VAL.WIDTH,
      Y: newTargetCoordinates.realHeight / INIT_VAL.HEIGHT
    }

    if(navItem.center < (menuContainerOffset.center/2)){
      leftDistance = "calc(50% - 36px)";
    } else {
      leftDistance = (navItem.center - menuContainerOffset.left)+"px";
    }

    if(window.innerWidth < 576){
      leftDistance = "0"
    }

    navBg.style.cssText = `
      transform: translateX(${leftDistance}) scale(${scaleFactors.X}, ${scaleFactors.Y})`;

    navArrow.style.cssText = `
      transform: translateX(${leftDistance}) rotate(45deg)`;

    dropDownContainer.style.cssText = `
      transform: translateX(${leftDistance});
      width: ${newTargetCoordinates.realWidth}px;
      height: ${newTargetCoordinates.realHeight + 10}px;`;

    dropdownRoot.style.pointerEvents = "auto";

    Object.keys(menuDropdowns).forEach(key => {
      if (key === dropdown) {
        menuDropdowns[key].parent.classList.add('active');
      } else {
        menuDropdowns[key].parent.classList.remove('active');
      }
    })

    if (!state.isOpen) {
      setTimeout(() => {
        navRoot.className = "algc-dropdownroot activeDropdown";
      }, 50);
    }

    window.clearTimeout(disableTransitionTimeout);
    state.isOpen = true;
  }

  const closeMenu = (event) => {
    state.isOpen = false;
    disableTransitionTimeout = setTimeout(() => {
      dropdownRoot.style.pointerEvents = "none";
      navRoot.className = "algc-dropdownroot notransition"
    }, 50);
  }

  const _utils = {};

  _utils.calculatePosition = (sourceNode) => {
    const box = sourceNode.getBoundingClientRect();
    const realWidth = sourceNode.offsetWidth;
    const realHeight = sourceNode.offsetHeight;

    return {
      left: box.left,
      top: box.top,
      width: box.width,
      height: box.height,
      realWidth: realWidth,
      realHeight: realHeight,
      center: box.left + box.width / 2
    }
  }

  _utils.setClassNames = (id) => {
    const nodeCount = Object.keys(refs);
    nodeCount.forEach((ref, index) => {
      const node = refs[ref].nodes[1];
      if (index < id) {
        node.className = 'algc-dropdownroot__section left';
      } else if (index === id) {
        node.className = 'algc-dropdownroot__section active';
      } else {
        node.className = 'algc-dropdownroot__section right';
      }
    });
  }

  _utils.getCoordinates = (target) => {
    const box = target.getBoundingClientRect();
  }

  const toggleMobileMenu = (event) => {
    mobileMenuButton.classList.toggle('algc-openmobile--open');
    mobileMenu.classList.toggle('algc-mobilemenu--open');
  }


  const searchIcon = document.querySelector('#search');
  const cancelIcon = document.querySelector('#cancel');
  const searchContainer = document.querySelector('.algc-search__input').parentNode;
  const searchInput = document.querySelector(docSearch.inputSelector);

  // Search
  const docSearchToggling = () => {
    function openSearchInput() {
      searchContainer.classList.add('open');
      searchInput.focus();
    }

    function closeSearchInput() {
      searchInput.blur();
      searchContainer.classList.remove('open');
    }

    function emptySearchInput() {
      if (searchInput.value !== '') {
        searchInput.value = '';
      } else {
        closeSearchInput();
      }
    }
    searchInput.setAttribute('value', '');
    searchIcon.addEventListener('click', openSearchInput);
    cancelIcon.addEventListener('click', emptySearchInput);
  };

  // If the user type :"s" or "/", open the searchbox
  const catchSearchShortcuts = () => {
    let keyPressed = {};

    document.addEventListener('keydown', e => {
      keyPressed[e.keyCode] = true;
    }, false);
    document.addEventListener('keyup', e => {
      keyPressed[e.keyCode] = false;
    }, false);

    const searchLoop = (event) => {
      if (keyPressed['83'] || keyPressed['191']) {
        document.querySelector('.algc-search__input').parentNode.classList.add('open');
        searchInput.focus();

        setTimeout(() => {
          keyPressed = {};
        }, 500);
      } else if (keyPressed['27']) {
        document.querySelector('.algc-search__input').parentNode.classList.remove('open');
        searchInput.blur();

        setTimeout(() => {
          keyPressed = {};
        }, 500);
      }
      setTimeout(searchLoop, 5);
    }

    searchLoop();
  }

  if (enableDocSearch) {
    docSearchToggling();
    catchSearchShortcuts();

    docsearch(docSearch);
  }

  function openSubList(event){
    event.preventDefault();
    event.stopPropagation();
    subListHolders.forEach(holder => {
      if(holder.classList.contains('open') && holder === event.target.parentNode){
        holder.classList.remove('open');
      } else {
        holder.classList.add('open');
      }
    })
  }

  function closeSubLists(event){
    subListHolders.forEach(holder => holder.classList.remove('open'));
  }

  subList.forEach(link => link.addEventListener('click', openSubList));

  // Assign event listeners
  menuTriggers.forEach(item => {
    item.addEventListener('mouseenter', triggerMenu);
    item.addEventListener('focus', triggerMenu);
  });

  navItems.forEach(item => {
    item.addEventListener('mouseleave', closeMenu);
  });

  navContainer.addEventListener('mouseenter', () => {
    clearTimeout(disableTransitionTimeout);
  });

  document.addEventListener('click', closeSubLists);
  document.querySelector('.algc-dropdownroot__dropdowncontainer').addEventListener('mouseleave', closeMenu);

  mobileMenuButton.addEventListener('click', toggleMobileMenu);
}

module.exports = communityHeader
